<?xml version="1.0" encoding="UTF-8"?>
<document>
  <properties>
    <title>Fessで作るApache Solrベースの検索サーバー 〜 ロールベース検索編</title>
    <author>菅谷 信介</author>
  </properties>
  <body>

    <section name="はじめに">
    <p>
      前回の<a href="http://codezine.jp/article/detail/4527">モバイル編</a>では、Fessを用いてどのように携帯端末向け検索システムを構築するかをご紹介しました。
      本記事ではFessの特徴的な機能の一つでもあるロールベース検索機能についてご紹介します。
    </p>
    <p>
      本記事ではFess 8.2.0 を利用して説明します。
      Fessの構築方法については<a href="http://codezine.jp/article/detail/4526">導入編</a>を参照してください。
    </p>
    </section>
    <section name="対象読者">
    <ul>
      <li>ポータルサイトなどの認証があるシステムで検索システムを構築してみたい方</li>
      <li>閲覧権限ごとに検索する環境を構築したい方</li>
    </ul>
    </section>

    <section name="必要な環境">
    <p>
      この記事の内容に関しては次の環境で、動作確認を行っています。
    </p>
    <ul>
      <li>
        CentOS 5.5
      </li>
      <li>
        JDK 1.6.0_22
      </li>
    </ul>
    </section>

    <section name="ロールベース検索">
    <p>
      Fessのロールベース検索とは、任意の認証システムで認証されたユーザーの認証情報を元に検索結果を出し分ける機能です。
      たとえば、営業部ロールを持つ営業担当者Aは検索結果に営業部ロールの情報が表示されるが、営業部ロールを持たない技術担当者Bは検索してもそれが表示されません。
      この機能を利用することで、ポータルやシングルサインオン環境でログインしているユーザーの所属する部門別や役職別などに検索を実現することができます。
    </p>
    <p>
      Fessのロールベース検索ではロール情報を以下の場所から取得できます。
    </p>
    <ol>
      <li>リクエストパラメータ</li>
      <li>リクエストヘッダー</li>
      <li>クッキー</li>
      <li>J2EE の認証情報</li>
    </ol>
    <p>
      利用方法としては、ポータルサーバーやエージェント型シングルサインオンシステムでは認証時にFessの稼働しているドメインとパスに対してクッキーで認証情報を保存することで、ロール情報をFessに渡すことができます。
      また、リバースプロキシ型シングルサインオンシステムではFessへのアクセス時にリクエストパラメータやリクエストヘッダーに認証情報を付加することで、Fessでロール情報を取得することができます。
      このように様々な認証システムと連携することで、ユーザーごとに検索結果を出し分けることができます。
    </p>
    <p>
      独自の認証システムを運用しているような場合は、jp.sf.fess.helper.RoleQueryHelperインターフェースを実装してクラスを用意することで対応することができます。
      作成したクラスは「<code>webapps/fess/WEB-INF/classes</code>」などのクラスパスが通っている場所に配置して、「<code>webapps/fess/WEB-INF/classes/fess.dicon</code>」でjp.sf.fess.helper.impl.RoleQueryHelperImplに代わって指定します。
    </p>
    </section>

    <section name="ロールベース検索を利用するための設定">
    <p>
      Fess 8.2.0 がインストールしてあるものとします。
      まだ、インストールしていない場合は、<a href="http://codezine.jp/article/detail/4526">導入編</a>を参考にしてインストールしてください。
    </p>
    <p>
      認証システムには様々なものがありますが、Fessでは別途認証システムを構築せずにFessの既存のログイン画面を利用したTomcatの認証を試せる環境を提供しているので、本記事ではこれを利用してJ2EEの認証情報（Tomcatの認証）を利用したロールベース検索を説明します。
    </p>

    <subsection name="Tomcatにユーザーを追加">
    <p>
      まず、検索結果を出し分けて表示するためにユーザーをTomcatに追加します。
      今回は、営業部（sales）と技術部（eng）の2つのロールを作成します。
      そして、ユーザーはsalesロールに属するtaroユーザーとengロールに属するhanakoユーザーを追加します。
      これらのユーザー情報を以下のように「<code>conf/tomcat-users.xml</code>」に記述します。
    </p>
    <div class="src_frame">
      <div class="caption">tomcat-users.xmlの内容</div>
<pre class="prettyprint">
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;tomcat-users&gt;
  &lt;role rolename="fess"/&gt;
  &lt;role rolename="solr"/&gt;
  &lt;role rolename="manager"/&gt;
  &lt;role rolename="sales"/&gt;&lt;!-- 追加 --&gt;
  &lt;role rolename="eng"/&gt;&lt;!-- 追加 --&gt;
  &lt;user username="admin" password="admin" roles="fess"/&gt;
  &lt;user username="solradmin" password="solradmin" roles="solr"/&gt;
  &lt;user username="manager" password="manager" roles="manager"/&gt;
  &lt;user username="taro" password="taropass" roles="sales"/&gt;&lt;!-- 追加 --&gt;
  &lt;user username="hanako" password="hanakopass" roles="eng"/&gt;&lt;!-- 追加 --&gt;
&lt;/tomcat-users&gt;
</pre>
    </div>
    <p>
      既存の認証システムを利用する場合はこの設定は不要です。
    </p>
    </subsection>

    <subsection name="fess.diconの設定">
    <p>
      ここからがFessに対する設定になります。
      まず、「<code>webapps/fess/WEB-INF/classes/fess.dicon</code>」のroleQueryHelperでデフォルトロールと認証情報の取得方法を設定します。
      今回はJ2EEの認証情報を用いるので、「<code>fess.dicon</code>」のroleQueryHelperは以下のような設定になります。
    </p>
    <div class="src_frame">
      <div class="caption">fess.diconの内容</div>
<pre class="prettyprint">
:
&lt;component name="roleQueryHelper" class="jp.sf.fess.helper.impl.RoleQueryHelperImpl"&gt;
    &lt;property name="defaultRoleList"&gt;
        {"guest"}
    &lt;/property&gt;
&lt;/component&gt;
:
</pre>
    </div>
    <p>
      上記のようにデフォルトロールを設定します。
      デフォルトロールは、ログインしていない状態で検索するときにそのロールとして検索したと扱われます。
      デフォルトロールを指定しないと、ログインしていない状態の検索ですべての検索結果が表示されてしまいます。
    </p>
    <p>
      J2EEの認証情報以外で利用する場合についてもここで説明しておきます。
      リクエストパラメータから認証情報を取得する場合は以下のように設定します。
    </p>
    <div class="src_frame">
      <div class="caption">fess.diconの内容</div>
<pre class="prettyprint">
:
&lt;component name="roleQueryHelper" class="jp.sf.fess.helper.impl.RoleQueryHelperImpl"&gt;
    &lt;property name="parameterKey"&gt;"fessRoles"&lt;/property&gt;
    &lt;property name="encryptedParameterValue"&gt;false&lt;/property&gt;
    &lt;property name="defaultRoleList"&gt;
        {"guest"}
    &lt;/property&gt;
&lt;/component&gt;
:
</pre>
    </div>
    <p>
      ここでは、リクエストパラメータのキーにfessRolesを指定して、ロール情報をカンマ区切りの値で渡すことができます。
      たとえば、salesロールとadminロールを持つユーザーが検索する際のURLは「<code>http://hostname/fess/search?...&amp;fessRoles=sales%0aadmin</code>」のようにfessRolesを付加されます。
      ここではencryptedParameterValueをfalseに設定していますが、この値をtrueにするとfessRolesの値部分をBlowfishやAESなどで暗号化して渡すことができます。
      暗号化して値を渡す場合には、FessCipherコンポーネントを指定して復号化できるように設定する必要があります。
    </p>
    <p>
      リクエストヘッダーから認証情報を取得する場合は以下のように設定します。
    </p>
    <div class="src_frame">
      <div class="caption">fess.diconの内容</div>
<pre class="prettyprint">
:
&lt;component name="roleQueryHelper" class="jp.sf.fess.helper.impl.RoleQueryHelperImpl"&gt;
    &lt;property name="headerKey"&gt;"fessRoles"&lt;/property&gt;
    &lt;property name="encryptedParameterValue"&gt;false&lt;/property&gt;
    &lt;property name="defaultRoleList"&gt;
        {"guest"}
    &lt;/property&gt;
&lt;/component&gt;
:
</pre>
    </div>
    <p>
      リクエストヘッダーのキーにfessRolesを指定して、ロール情報をカンマ区切りの値で渡すことができます。
    </p>
    <p>
      クッキーから認証情報を取得する場合は以下のように設定します。
    </p>
    <div class="src_frame">
      <div class="caption">fess.diconの内容</div>
<pre class="prettyprint">
:
&lt;component name="roleQueryHelper" class="jp.sf.fess.helper.impl.RoleQueryHelperImpl"&gt;
    &lt;property name="cookieKey"&gt;"fessRoles"&lt;/property&gt;
    &lt;property name="encryptedParameterValue"&gt;false&lt;/property&gt;
    &lt;property name="defaultRoleList"&gt;
        {"guest"}
    &lt;/property&gt;
&lt;/component&gt;
:
</pre>
    </div>
    <p>
      リクエストパラメータと同様に、クッキーの名前にfessRolesを指定して、ロール情報をカンマ区切りの値で渡すことができます。
    </p>
    </subsection>

    <subsection name="web.xmlの設定">
    <p>
      「<code>fess.dicon</code>」と同様にログインできるようにするために「<code>webapps/fess/WEB-INF/web.xml</code>」のセキュリティ関連の設定を変更します。
      以下のような設定になります。
    </p>
    <div class="src_frame">
      <div class="caption">web.xmlの内容</div>
<pre class="prettyprint">
:
&lt;security-constraint&gt;
  &lt;web-resource-collection&gt;
    &lt;web-resource-name&gt;Fess Authentication&lt;/web-resource-name&gt;
    &lt;url-pattern&gt;/login/login&lt;/url-pattern&gt;
  &lt;/web-resource-collection&gt;
  &lt;auth-constraint&gt;
    &lt;role-name&gt;fess&lt;/role-name&gt;
    &lt;role-name&gt;sales&lt;/role-name&gt;
    &lt;role-name&gt;eng&lt;/role-name&gt;
  &lt;/auth-constraint&gt;
&lt;/security-constraint&gt;
:
&lt;security-role&gt;
  &lt;role-name&gt;fess&lt;/role-name&gt;
&lt;/security-role&gt;
&lt;security-role&gt;
  &lt;role-name&gt;sales&lt;/role-name&gt;
&lt;/security-role&gt;
&lt;security-role&gt;
  &lt;role-name&gt;eng&lt;/role-name&gt;
&lt;/security-role&gt;
:
</pre>
    </div>
    <p>
      リクエストパラメータなどの他の認証を用いる場合には、この設定は不要です。
    </p>
    </subsection>

    </section>

    <section name="ロールベース検索の実行">
    <p>
      設定が一通り完了したので、Fessを起動してください。
    </p>

    <subsection name="登録ユーザーの確認">
    <p>
      今回の設定でadmin、taro、hanakoの3つユーザーでFessにログインできる状態になっています。
      順にログインできることを確認してください。
      <a href="http://localhost:8080/fess/admin/" target="_blank">http://localhost:8080/fess/admin/</a>にアクセスして、adminユーザーでログインすると通常通り管理画面が表示されます。
      次にadminユーザーをログアウトして、再度<a href="http://localhost:8080/fess/admin/" target="_blank">http://localhost:8080/fess/admin/</a>にアクセスして、taroとhanakoユーザーでログインしてください。
      ログインが成功すると、<a href="http://localhost:8080/fess/" target="_blank">http://localhost:8080/fess/</a>の検索画面が表示されます。
      ログアウトするときは、<a href="http://localhost:8080/fess/admin/" target="_blank">http://localhost:8080/fess/admin/</a>にアクセスして［ログアウト］ボタンをクリックします。
    </p>
    <div class="centerimg">
      <div class="caption">ログアウト画面</div>
      <div class="img">
        <a href="/images/ja/article/3/logout.png" rel="lightbox"><img src="/images/ja/article/3/logout.png" alt="ログアウト画面" /></a>
      </div>
    </div>
    </subsection>

    <subsection name="ロールの作成">
    <p>
      adminユーザーでログインして、左側のメニューの［ロール］をクリックしてロール一覧を表示します。
      今回は次の3つのロールを作成してください。
    </p>
    <div class="tbl_frame">
      <div class="cap">ロール一覧</div>
      <table class="tbl" width="200">
        <tbody>
          <tr>
            <td class="th">ロール名</td>
            <td class="th">値</td>
          </tr>
          <tr>
            <td>デフォルト</td>
            <td>default</td>
          </tr>
          <tr>
            <td>営業部</td>
            <td>sales</td>
          </tr>
          <tr>
            <td>技術部</td>
            <td>eng</td>
          </tr>
        </tbody>
      </table>
    </div>
    </subsection>

    <subsection name="クロール設定の追加">
    <p>
      クロール対象を登録します。
      今回は営業部ロールのユーザーは<a href="http://www.n2sm.net/" target="_blank">http://www.n2sm.net/</a>だけを検索でき、技術部ロールのユーザーは<a href="http://fess.codelibs.org/" target="_blank">http://fess.codelibs.org/</a>だけを検索できるようにします。
      これらのクロール設定を登録するため、左側のメニューの［ウェブ］をクリックしてウェブクロール設定一覧を表示します。
      [新規作成] をクリックして、ウェブクロール設定を作成してください。
      まず、営業部用に<a href="http://www.n2sm.net/" target="_blank">http://www.n2sm.net/</a>へのクロール設定として［ロール］項目に営業部を選択して作成します。
      次に<a href="http://fess.codelibs.org/" target="_blank">http://fess.codelibs.org/</a>のクロール設定でロールに技術部を選択して作成します。
    </p>
    <div class="centerimg">
      <div class="caption">ウェブクロール設定のロール項目</div>
      <div class="img">
        <a href="/images/ja/article/3/crawl-conf-role.png" rel="lightbox"><img src="/images/ja/article/3/crawl-conf-role.png" alt="ウェブクロール設定のロール項目" /></a>
      </div>
    </div>
    </subsection>

    <subsection name="クロールの開始">
    <p>
      クロール設定登録後、左側のメニューの［システム設定］をクリックして、システム設定画面で［開始］ボタンをクリックして、クロールを開始します。
      クロールが完了するまでしばらく待ちます。
    </p>
    </subsection>

    <subsection name="検索">
    <p>
      クロール完了後、<a href="http://localhost:8080/fess/" target="_blank">http://localhost:8080/fess/</a>にアクセスして、ログインしていない状態で「fess」などの単語を検索して、検索結果が表示されないことを確認してください。
      次にtaroユーザーでログインして、同様に検索してください。
      taroユーザーはsalesロールを持つため、<a href="http://www.n2sm.net/" target="_blank">http://www.n2sm.net/</a>の検索結果だけが表示されます。
    </p>
    <div class="centerimg">
      <div class="caption">salesロールでの検索画面</div>
      <div class="img">
        <a href="/images/ja/article/3/search-by-sales.png" rel="lightbox"><img src="/images/ja/article/3/search-by-sales.png" alt="salesロールでの検索画面" /></a>
      </div>
    </div>
    <p>
      taroユーザーをログアウトして、hanakoユーザーでログインしてください。
      先ほどと同様に検索すると、hanakoユーザーはengロールを持つので、<a href="http://fess.codelibs.org/" target="_blank">http://fess.codelibs.org/</a>の検索結果だけが表示されます。
    </p>
    <div class="centerimg">
      <div class="caption">engロールでの検索画面</div>
      <div class="img">
        <a href="/images/ja/article/3/search-by-eng.png" rel="lightbox"><img src="/images/ja/article/3/search-by-eng.png" alt="engロールでの検索画面" /></a>
      </div>
    </div>
    </subsection>

    </section>

    <section name="まとめ">
    <p>
      Fessのセキュリティー機能の一つであるロールベース検索についてご紹介しました。
      J2EEの認証情報を用いたロールベース検索を中心に説明しましたが、Fessへの認証情報の受け渡しは汎用的な実装であるので様々な認証システムに対応できると思います。
      ユーザーの属性ごとに検索結果を出し分けることができるので、社内ポータルサイトや共有フォルダなどの閲覧権限ごとに検索が必要なシステムも実現することが可能です。
    </p>
    <p>
      次回は、Fessの提供しているAjax機能についてご紹介します。
    </p>
    </section>

    <section name="参考資料">
    <ul>
      <li>
        <a href="http://fess.codelibs.org/ja/">Fess</a>
      </li>
    </ul>
    </section>
  </body>
</document>
